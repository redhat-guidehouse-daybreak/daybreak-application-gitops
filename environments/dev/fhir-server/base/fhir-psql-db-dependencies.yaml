---
# Source: fhir-server/templates/fhir-psql-db-dependencies.yaml
kind: List
apiVersion: v1
namespace: fhir 
items:
 - kind: PersistentVolumeClaim
   apiVersion: v1
   metadata:
    name: psql-fhir
    labels:
      app: psql-fhir
     
   spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi

 - kind: ServiceAccount       
   apiVersion: v1
   metadata:
      name: fhir-service-user
      labels:
            app: psql-fhir      

 - kind: ConfigMap     
   apiVersion: v1
   metadata:
      name: fhir-postgres-cm
      labels:
            app: psql-fhir   
   data:
      create_database.sh: |-
        
            #! /bin/bash
        
            
        
            export PGPASSWORD=$POSTGRESQL_PASSWORD
        
            
        
            SCRIPT_DIR=''
        
            pushd "$(dirname "$(readlink -f "$BASH_SOURCE")")" > /dev/null && {
        
                SCRIPT_DIR="$PWD"
        
                popd > /dev/null
        
            }   
        
            
        
            echo "creating FHIR Server database"
        
            
        
            psql -h $POSTGRESQL_SERVICE -d $POSTGRESQL_DATABASE -U $POSTGRESQL_USER -w -c "grant all privileges on database ${POSTGRESQL_DATABASE} to ${POSTGRESQL_USER};"
        
            
        
            echo "Enabling for Debezium"
        
            export PGPASSWORD=$POSTGRESQL_ADMIN_PASSWORD
        
            psql -h $POSTGRESQL_SERVICE -c "ALTER USER ${POSTGRESQL_USER} with Replication;"
        
            
        
            # Debezium needs ability to execute the following (which requires superuser) when using pgoutput plugin: "CREATE PUBLICATION dbz_publication FOR ALL TABLES;"
        
            #   https://debezium.io/documentation/reference/connectors/postgresql.html#postgresql-replication-user-privileges
        
            psql -h $POSTGRESQL_SERVICE  -c "ALTER USER ${POSTGRESQL_USER} with superuser;"
        
            
        
            
        
      wait_for_postgresql.sh: |-   
        
            #!/bin/sh
        
            
        
            # wait-for-postgres.sh
        
            set -e
        
            cmd="$@"
        
            timer="5"
        
            echo "Path is: $PATH"
        
            echo "When postgres is available, we will run this command: $cmd"
        
            echo "Waiting for PostgreSQL at: $POSTGRESQL_SERVICE"
        
            until pg_isready -h $POSTGRESQL_SERVICE 2>/dev/null; do
        
              echo "Postgres is unavailable - sleeping for $timer seconds"
        
              sleep $timer
        
            done
        
            echo "Postgres is up - executing command"
        
            exec $cmd
        

 - kind: ConfigMap       
   apiVersion: v1
   metadata:
      name: fhir-debezium-cm
      labels:
            app: psql-fhir
   data:
      hapi-psql-debezium-conf.conf: |-
          
            # verify by executing the following while logged into postgresql:  SHOW wal_level
          
            
          
            wal_level = logical             
          
            max_wal_senders = 1             
          
            max_replication_slots = 1
          
            
          

 - kind: Secret
   apiVersion: v1
   metadata:
        name: psql-fhir
        labels:
            app: psql-fhir
   type: Opaque
   data:
        database-user: Zmhpcg==
        database-password: Zmhpcg==
        database-name: Zmhpcg==

 - kind: Service       
   apiVersion: v1
   metadata:
      name:  psql-fhir
      annotations:
        template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
      labels:
        app:  psql-fhir
   spec:
    ports:
    - name: postgresql
      protocol: TCP
      port: 5432
      targetPort: 5432
      nodePort: 0
    selector:
      name:  psql-fhir
    type: ClusterIP
    sessionAffinity: None
